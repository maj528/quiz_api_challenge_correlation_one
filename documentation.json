swagger: '2.0'
info:
  version: 1.0.0
  title: Quiz API Challenge Correlation One
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    This is my backend challenge submission. For all routes, please prefix the requests with "http://localhost:3000/api/v1/" 
  contact:
    name: Majid Fakhoury 
    email: majidfakhoury@gmail.com 
# basePath: /v2
tags:
- name: Quiz API
  description: An API for taking quizzes using the Correlation One assessment
# schemes:
# - http
paths:
  /candidates/:
    post:
      summary: Create a candidate
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create a Candidate
        required: true
      responses:
        200:
          description: successful operation
      tags:
        - candidate
  /candidates/{candidate_id}:
    get:
      summary: Find a candidate
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Find candidate by ID
        required: true
      tags:
        - candidate
  /candidates/{candidate_id}/sessions/{session_id}:
    get:
      tags:
      - session
      summary: Find a candidate's session by ID
      description: Returns a single session
      produces:
      - application/json
      parameters:
      - name: candidate_id
        in: path
        description: ID of candidate
        required: true
        type: integer
        format: int64
      - name: session_id
        in: path
        description: ID of session
        required: true
        type: string
        format: uuid  
    
          
  /candidates/{candidate_id}/sessions/:
    post:
      tags:
      - session
      summary: Creates a session for a candidate
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: candidate_id
        in: path
        description: ID of candidate
        required: true
        type: integer
        format: int64

  /candidates/{candidate_id}/sessions/{session_id}/submissions/{submission_id}/:
    get:
      tags:
      - submission
      summary: Returns a candidate's submission in a specific session
      produces:
      - application/json
      parameters:
      - name: submission_id
        in: path
        description: ID of submission
        required: true
        type: integer
        format: int64
  
  /candidates/{candidate_id}/sessions/{session_id}/submissions/:
    post:
      tags:
      - submission
      summary: Creates a candidate's submission in a specific session
      produces:
      - application/json
      parameters:
      - name: candidate_id
        in: path
        description: ID of candidate
        required: true
        type: integer
        format: int64
      - name: answer
        in: path
        description: Answer of the question
        required: true
        type: string
  
  /candidates/{candidate_id}/sessions/{session_id}/submissions/{submission_id}/questions/:
    post:
      tags:
      - question
      summary: Create a question for the submission of a candidate's session
      produces:
      - application/json
      parameters:
      - in: body
      - name: question_type
        in: path
        required: true
        type: integer
        description: 0 for radio, 1 for multiselect, 2 for integer, 3 for string
      - name: question_description
        in: path
        description: The question itself
        required: true
        type: string
      - name: correct_answer
        in: path
        description: The correct answer to the question
        required: true
        type: string        

          
  /candidates/{candidate_id}/sessions/{session_id}/submissions/{submission_id}/questions/{question_id}/:
    get:
      tags:
      - question
      summary: Find a question in a submission for a candidate's specific session by ID
      produces:
      - application/json
      parameters:
      - name: question_id
        in: path
        description: ID of question
        required: true
        type: integer
        format: int64
     
  /answer_options/:
    post:
      tags:
      - answeroption
      summary: Creates various answer options
      produces:
      - application/json
      parameters:
      - in: body
      - name: answer_description
        description: An answer description
        type: string
        required: true
      - name: question_id
        description: The associated question's ID
        type: integer
        format: int64
        
  /answer_options/{answer_id}:
    get:
      tags:
      - answeroption
      summary: Finds an answer option
      produces:
      - application/json
      parameters:
      - name: answer_option_id
        in: path
        description: ID of answer option
        required: true
        type: integer
        format: int64    